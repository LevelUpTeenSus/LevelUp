rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Role documents: both 'userRoles' and 'roles' collections
    match /userRoles/{userId} {
      allow read, write: if request.auth != null
                         && request.auth.uid == userId;
    }
    match /roles/{userId} {
      allow read, write: if request.auth != null
                         && request.auth.uid == userId;
    }

    // User store documents ('users' and 'stores' collections)
    match /users/{userId} {
      allow read, write: if request.auth != null
                         && request.auth.uid == userId;
    }
    match /stores/{userId} {
      allow read, write: if request.auth != null
                         && request.auth.uid == userId;
    }

    // Alias for invites: same rules as invitations
    match /invites/{code} {
      allow create: if request.auth != null
                    && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role == 'parent'
                    && request.resource.data.parentUid == request.auth.uid;
      allow read: if request.auth != null
                  && (
                    (get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role == 'parent'
                     && resource.data.parentUid == request.auth.uid)
                    || resource.data.childUid == request.auth.uid
                  );
      allow update: if request.auth != null
                    && !('childUid' in resource.data)
                    && request.resource.data.childUid == request.auth.uid;
      allow delete: if request.auth != null
                    && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role == 'parent'
                    && resource.data.parentUid == request.auth.uid;
    }

    // Invitations
    match /invitations/{code} {
      // Parents can create invites for their own kid
      allow create: if request.auth != null
                    && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role == 'parent'
                    && request.resource.data.parentUid == request.auth.uid;

      // Parents (owner) or claimed child can read
      allow read: if request.auth != null
                  && (
                    (get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role == 'parent'
                     && resource.data.parentUid == request.auth.uid)
                    || resource.data.childUid == request.auth.uid
                  );

      // Child claims an unclaimed invite
      allow update: if request.auth != null
                    && !('childUid' in resource.data)
                    && request.resource.data.childUid == request.auth.uid;

      // Parent who created can delete
      allow delete: if request.auth != null
                    && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role == 'parent'
                    && resource.data.parentUid == request.auth.uid;
    }

    // Child activity logs
    match /childActivity/{docId} {
      allow create: if request.auth != null
                    && request.resource.data.childUid == request.auth.uid;
      allow read: if request.auth != null
                  && (
                    resource.data.childUid == request.auth.uid
                    || (
                       get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role == 'parent'
                       && get(/databases/$(database)/documents/users/$(resource.data.childUid)).data.parentUid == request.auth.uid
                     )
                  );
      allow update, delete: if false;
    }

    // Items collection
    match /items/{itemId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null
                    && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role == 'parent';
    }
  }
}