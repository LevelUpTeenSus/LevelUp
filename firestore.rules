rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Each user can read/write their own role document
    match /userRoles/{userId} {
      allow read, write: if request.auth != null
                         && request.auth.uid == userId;
    }

    // Each user can read/write their own store under 'users'
    match /users/{userId} {
      allow read, write: if request.auth != null
                         && request.auth.uid == userId;
    }

    // Invitations: parents create; child claims; both can read
    match /invitations/{code} {
      // Parent creates invite tied to their UID
      allow create: if request.auth != null
                    && get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.role == 'parent'
                    && request.resource.data.parentUid == request.auth.uid;

      // Parents (owner) or claimed child can read
      allow read: if request.auth != null
                  && (
                    (get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.role == 'parent'
                      && resource.data.parentUid == request.auth.uid)
                    || resource.data.childUid == request.auth.uid
                  );

      // Child claims an unclaimed invite
      allow update: if request.auth != null
                    && !('childUid' in resource.data)
                    && request.resource.data.childUid == request.auth.uid;

      // Parent who created can delete
      allow delete: if request.auth != null
                    && get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.role == 'parent'
                    && resource.data.parentUid == request.auth.uid;
    }

    // Child activity logs: children create their own, parents can read their child’s
    match /childActivity/{activityId} {
      allow create: if request.auth != null
                    && request.resource.data.childUid == request.auth.uid;

      allow read: if request.auth != null
                  && (
                    resource.data.childUid == request.auth.uid
                    || (
                      get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.role == 'parent'
                      && get(/databases/$(database)/documents/users/$(resource.data.childUid)).data.parentUid == request.auth.uid
                    )
                  );

      allow update, delete: if false;
    }

    // List of all items (responsibilities/privileges) — read-only for authenticated users
    match /items/{itemId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null
                    && get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.role == 'parent';
    }
  }
}